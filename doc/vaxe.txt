*vaxe.txt* A plugin for working with the Haxe language. For Vim version 7.3

==============================================================================
Author:  Justin Donaldson <jdonaldson@gmail.com>              *vaxe-author*
License: WTFPL (see |vaxe-license|)
==============================================================================
CONTENTS                                        *vaxe-contents*

|vaxe-introduction|                   Introduction and Feature Summary
|vaxe-commands|                       Commands
|vaxe-functions|                      Functions
|vaxe-settings|                       Settings
|compiler-vaxe|                       Compiler

{Incompatible with Vi}

==============================================================================

INTRODUCTION                                    *vaxe*
                                                *vaxe-introduction*

This plugin adds basic support for Haxe syntax, indenting, and compiling.  In
addition, it provides functions and features for advanced vim features such as
|omnifunc|, |makeprg|, and |ctags|, as well as supporting useful bundles such
as |tagbar|, |neocomplcache|, |snipmate|, and |powerline|. Also included is
syntax and support for Hxml.

Vaxe uses the Haxe compiler extensively to determine code completions, and
generate various metadata.  The compiler, in turn, uses sequences of compiler
directives in "hxml" files in order to specify build and output options,
similar to gnu makefiles.  To trigger completions manually, use CTRL-X CTRL-O
after the period following a field or module.  This will trigger the |omnifunc|.

Vaxe has two different "build modes" that designate how to find the hxml
file, as well as how to set up the |makeprg|.  If you're working with simple
projects, then the default mode will work just fine.  If you have a complex
project structure with many different sub-builds, then you may want to consider
using |vaxe-project-mode|.  You can set up an autocommand to set the project
hxml:

>
:autocmd BufNewFile,BufRead /project/* vaxe#ProjectHxml("/project/project.hxml")
<

Keep in mind that the project mode will persist throughout your entire session.
If you wish to exit project mode, use the DefaultHxml command, or
vaxe#DefaultHxml function.  Also, the quickfix list and related compiler
information will always be in relation to the working directory at compilation
time.  It is a good idea to keep an hxml file in the root of your working
directory, and use vaxe to invoke the compiler there.

If you need to change the name of the hxml file often, it may be a good idea
to print the name of the build file in your statusline, to remind you which
file is being used for "make" and completions:

>
:autocmd BufNewFile,BufRead *.hx set statusline+=\ build:\ %{vaxe#CurrentBuild()}
<

==============================================================================
BUILD MODES                                     *vaxe-build*

Default                                         *vaxe-default-mode*
                        This mode is used automatically any time a *.hx file
                        is opened.  It can be retriggered by calling
                        |vaxe#DefaultHxml|. Vaxe will search the project
                        path for the preferred file indicated by
                        |g:vaxe_default_parent_search_glob|.

                        If it finds a preferred build file in the parent
                        directories of the currently edited file, it will set
                        a b:vaxe_hxml variable for the current buffer.
                        It sets a |makeprg| that has the following behavior:
                        It will cd to the discovered hxml directory, call the
                        compiler with the hxml, and redirect errors to
                        standard out.

Project                                         *vaxe-project-mode*
                        This mode is used when |vaxe#ProjectHxml| is called.
                        It will set a g:vaxe_hxml variable that will
                        override any b:vaxe_hxml variables set by the default
                        method.  It also sets a |makeprg| that simply executes
                        the haxe compiler in the working directory,
                        and redirects errors to standard out.  Project mode
                        assumes that you will keep the same working directory
                        throughout your vim session.


==============================================================================

HAXE COMMANDS                                    *vaxe-commands*

|DefaultHXML|           Call the |vaxe#DefaultHxml| function.  Accepts an
                        optional single argument that will specify the hxml,
                        lime or flow project file to use.

|ProjectHXML|           Call the |vaxe#ProjectHxml| function. Accepts an
                        optional single argument that will specify the hxml to
                        use.

                        use.


|VaxeToggleLogging|     Turns vaxe logging on/off (logs to :message)


==============================================================================

FUNCTIONS                                        *vaxe-functions*


*vaxe#CurrentBuild*     Returns the current active project build file if it
                        is specified, else it will return the default build
                        file name if it exists. Accepts a single argument that
                        will specify the hxml to use.


*vaxe#DefaultHxml*      Find the preferred build file recursively in the
                        parents of the working directory. This function is
                        called automatically whenever any hx file is opened.
                        Accepts a single optional argument that will specify
                        the hxml (or lime/flow project) to use.

*vaxe#OpenHxml*         Open the current build file specified with
                        |vaxe#DefaultHxml|, or |vaxe#ProjectHxml|. You can
                        easily add this function to a trigger:
                        >
                            map <leader>oh :call vaxe#OpenHxml()<CR>
                        <

*vaxe#ProjectHxml*      Find and select hxml files in the working directory.
                        Selecting a file with this method will enter
                        |vaxe-project-mode|.  If you have installed |tlib|,
                        then it will use |tlib#input#List| to select hxml
                        candidates. If you call this often, it makes sense to
                        map it to a leader action:
                        >
                            map <leader>ph : call vaxe#ProjectHxml()<CR>
                        <

==============================================================================

SETTINGS                                        *vaxe-settings*


*g:vaxe_prefer_hxml*    The name of the hxml file/glob to search for and use
                        automatically.  The default is "build.hxml".

*g:vaxe_prefer_first_in_directory*
                        When vaxe finds more than one build file in a directory,
                        setting this variable to 1 will make vaxe always choose
                        the first one.  If it is set to 0, then it will present
                        a list of options.  The default is 1.

*g:vaxe_default_parent_search_patterns*
                        This is a list of |glob| patterns that vaxe uses to
                        determine which hxml (or lime/flow) file to use on startup.
                        The default is:
                        >
                        [g:vaxe_prefer_lime, g:vaxe_prefer_flow, g:vaxe_prefer_hxml, '*.hxml']
                        <

                        Note that vaxe will search recursively through
                        each parent directory, and stop at the first file that
                        matches the pattern.  E.g., by default, vaxe will
                        recursively look for *any* lime file, or one called
                        'build.hxml'.  It will give precedence to the lime file,
                        since it occurs before the hxml file in the search
                        pattern list. Finally, if none of those options are
                        available, it will fall back to using any hxml file
                        it can find.

*g:vaxe_hxml*           A variable that indicates the |vaxe-project-mode|
                        build file.  It will override the |vaxe-default-mode|
                        setting if present.

                                                    *third party settings*
*g:vaxe_enable_airline_defaults*
                        Vaxe provides support for vim-airline by changing the
                        filename display to also include the current hxml build
                        file (defaults to 1).
*g:vaxe_lsp_app_location*
                        Vaxe provides a haxe language server app as part of the
                        bundle.  If you prefer to use your own for some reason,
                        use this variable to set its location.

*g:vaxe_lsp_args*
                        Provide additional args to the language server.
                        (E.g. --inspect-brk for debugging)

*g:vaxe_lsp_cache_location*
                        Provide the location where the lsp cache should be
                        located (default /tmp/haxe_lsp_cache).


=============================================================================

MISC                                            *vaxe-misc*

Vaxe will change the errrorformat syntax if it finds "-D absolute_path" in the
current hxml.  This -D compiler switch adds the full path for files in trace
output, making it possible to jump to trace declarations in the quickfix
window.


LICENSE                                         *vaxe-license*

Copyright (C) 2012 Justin Donaldson <jdonaldson@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
